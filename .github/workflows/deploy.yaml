name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repository if it does not exist
        id: create-ecr
        run: |
          if ! aws ecr describe-repositories --repository-names notification-service; then
            aws ecr create-repository --repository-name notification-service
          fi

      - name: Build Docker image
        run: |
          docker build -t notification-service .
          docker tag notification-service:latest ${{ steps.ecr-login.outputs.registry }}/notification-service:latest

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/notification-service:latest

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./terraform

      - name: Import existing ECR repository if it exists
        run: |
          terraform import aws_ecr_repository.notification_service notification-service || echo "ECR repository does not exist, continuing..."
        working-directory: ./terraform

      - name: Import existing ECS cluster if it exists
        run: |
          terraform import aws_ecs_cluster.mycluster notification_cluster || echo "ECS cluster does not exist, continuing..."
        working-directory: ./terraform

      - name: Import existing IAM role if it exists
        run: |
          terraform import aws_iam_role.ecs_task_execution_role ecs_task_execution_role || echo "IAM role does not exist, continuing..."
        working-directory: ./terraform

      - name: Apply Terraform configuration
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster notification_cluster --service notification-service --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-south-1
